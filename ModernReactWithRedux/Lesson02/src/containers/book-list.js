import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
import { bindActionCreators } from 'redux';

class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return <li key={book.title} onClick={() => this.props.selectBook(book)} className="list-group-item">
        {book.title}
      </li>;
    });
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    );
  }

}

// if application state changes, BookList will re-render
// if application state changes, books will be props
// takes in the entire application state and maps to the props of this Component / Container
function mapStateToProps(state){
  // whatever is returned will show up as Props inside our BookList
  return {
    books: state.books
  }
}

// anything returned from this function will end up as props on the book list container
function mapDispatchToProps(dispatch){
  // Whewnever sleect book is called, result should be passed to all
  // of our reducers
  // make sure this flows thru all of reducers
  // this key is our prop
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// promote bookluist from a componet to a container// it needs to know about this new dispatch methois,
// selectBook. Make it available as a prop
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
// a container is a react Component that has direct connection to the state managed by redux
// also called smart components

// application state generated by reducer functions
